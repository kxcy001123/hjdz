// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        color: {
          value: [1.0, 1.0, 1.0, 1.0],
          editor: {
            type: color,
            tooltip: "外发光颜色"
          }
        }

        iResolution: {
            value: [1280,720,0,0],
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform ARGS{
    vec4 iResolution;
    vec4 color;
  };

  void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord.xy;
    vec2 unit = 1.0 / iResolution.xy;
    vec4 texel = texture2D(texture, uv);
    vec4 finalColor = vec4(0.0);
    float density = 0.0;

    if(texel.a >= 1.0)
    {
        finalColor = texel;
    }
    else
    {
        const float radius = 1.0;
        for(int i = 0; i < (int(radius)); ++i)
        {
            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;
        }
        density = density / radius;
        finalColor = vec4(color.rgb * density, density);
        finalColor += vec4(texel.rgb * texel.a, texel.a);
    }
    fragColor = finalColor;
}

  void main () {
    mainImage(gl_FragColor, v_uv0.xy);
  }
}%

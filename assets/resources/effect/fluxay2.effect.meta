{
  "ver": "1.0.25",
  "uuid": "96fcad5d-4ba5-4b73-9344-f1e9d255ca05",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float avv;\nuniform float pow1;\nuniform float pow2;\nuniform float pow3;\nuniform float speed;\nvoid main () {\n  vec4 color = v_color;\n  float time = cc_time.x * .5+5.;\n  vec2 uv = v_uv0.xy;\n  vec2 p = mod(uv*avv, avv)-250.0;\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .0045;\n  float speed = 4.5;\n  for (int n = 0; n < 5; n++)\n  {\n      float t =  time * (1.0 - (speed / float(n+1)));\n      i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5*t + i.x));\n      c += 1.0/length(vec2(p.x / (cos(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n  }\n  c /= float(5);\n  c = 1.17-pow(c, 1.8);\n  vec4 tex = texture2D(texture,uv);\n  float c1;\n  float c2;\n  float c3;\n  if(pow1==0.0){\n    c1 = 0.0;\n  }else{\n    c1 = pow(abs(c), pow1);\n  }\n  if(pow2==0.0){\n    c2 = 0.0;\n  }else{\n    c2 = pow(abs(c), pow2);\n  }\n  if(pow3==0.0){\n    c3 = 0.0;\n  }else{\n    c3 = pow(abs(c), pow3);\n  }\n  vec3 colour = vec3(c1, c2, c3);\n  colour = clamp(colour + vec3(.0, .0, .0), .0, tex.a);\n  float alpha = c*tex[3];\n  tex[0] = tex[0] + colour[0]*alpha;\n  tex[1] = tex[1] + colour[1]*alpha;\n  tex[2] = tex[2] + colour[2]*alpha;\n  gl_FragColor = color * tex;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform ARGS{\n  float text;\n  float avv;\n  float pow1;\n  float pow2;\n  float pow3;\n  float speed;\n};\nuniform Light {\n  vec4 RippleColor;\n};\nvoid main () {\n  vec4 color = v_color;\n  float time = cc_time.x * .5+5.;\n  vec2 uv = v_uv0.xy;\n  vec2 p = mod(uv*avv, avv)-250.0;\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .0045;\n  float speed = 4.5;\n  for (int n = 0; n < 5; n++)\n  {\n      float t =  time * (1.0 - (speed / float(n+1)));\n      i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5*t + i.x));\n      c += 1.0/length(vec2(p.x / (cos(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n  }\n  c /= float(5);\n  c = 1.17-pow(c, 1.8);\n  vec4 tex = texture2D(texture,uv);\n  float c1;\n  float c2;\n  float c3;\n  if(pow1==0.0){\n    c1 = 0.0;\n  }else{\n    c1 = pow(abs(c), pow1);\n  }\n  if(pow2==0.0){\n    c2 = 0.0;\n  }else{\n    c2 = pow(abs(c), pow2);\n  }\n  if(pow3==0.0){\n    c3 = 0.0;\n  }else{\n    c3 = pow(abs(c), pow3);\n  }\n  vec3 colour = vec3(c1, c2, c3);\n  colour = clamp(colour + vec3(.0, .0, .0), .0, tex.a);\n  float alpha = c*tex[3];\n  tex[0] = tex[0] + colour[0]*alpha;\n  tex[1] = tex[1] + colour[1]*alpha;\n  tex[2] = tex[2] + colour[2]*alpha;\n  gl_FragColor = color * tex;\n}"
      }
    }
  ],
  "subMetas": {}
}
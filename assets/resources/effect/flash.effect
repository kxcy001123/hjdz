// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        mainTexture:  { value: grey }
        noiseTexture: { value: black }
        textureMoveSpeed: { value: [0, 0] }
        noiseMoveSpeed:   { value: [0, 0] }
}%


CCProgram vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D mainTexture;
  #if USE_TEXTURE_MOVE
  uniform ConstTextureMove{
    vec2 textureMoveSpeed;
  };
  #endif
  #endif

  #if USE_NOISE_TEXTURE
    uniform sampler2D noiseTexture;
    #if USE_NOISE_MOVE
    uniform ConstNoiseMove{
      vec2 noiseMoveSpeed;
    };
    #endif
  #endif


  void main () {
    vec4 o = vec4(1.0, 1.0, 1.0, 1.0);
    o *= texture(texture, v_uv0);
    #if USE_TEXTURE
      vec2 uv = v_uv0;

      #if USE_TEXTURE_MOVE
        uv.x = uv.x + cc_time.x * textureMoveSpeed.x;
        uv.y = uv.y + cc_time.x * textureMoveSpeed.y;
      #endif

      #if USE_NOISE_TEXTURE
        vec2 noise_uv = v_uv0;
        #if USE_NOISE_MOVE
          vec2 speed = vec2(cc_time.x * noiseMoveSpeed.x ,cc_time.x * noiseMoveSpeed.y);
          noise_uv.xy = v_uv0.xy + speed.xy;
        #endif
        
        vec4 offset = texture(noiseTexture,noise_uv);
        uv.x = uv.x + (offset.x - 0.5); 
        uv.y = uv.y + (offset.y - 0.5); 
      #endif

    #endif

    vec4 mainColor = texture(mainTexture, uv);

    if(mainColor.y > 0.55){
      o *= vec4(mainColor[0], mainColor[1], mainColor[2], 1.0);
    }

    // o *= texture(mainTexture, uv);

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%

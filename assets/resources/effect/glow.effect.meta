{
  "ver": "1.0.25",
  "uuid": "f236f5bc-47cd-41b5-814c-656b494c1bfe",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n#endif\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform vec4 iResolution;\nuniform vec4 color;\n  void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy;\n    vec2 unit = 1.0 / iResolution.xy;\n    vec4 texel = texture2D(texture, uv);\n    vec4 finalColor = vec4(0.0);\n    float density = 0.0;\n    if(texel.a >= 1.0)\n    {\n        finalColor = texel;\n    }\n    else\n    {\n        const float radius = 1.0;\n        for(int i = 0; i < (int(radius)); ++i)\n        {\n            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;\n            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;\n            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;\n            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;\n        }\n        density = density / radius;\n        finalColor = vec4(color.rgb * density, density);\n        finalColor += vec4(texel.rgb * texel.a, texel.a);\n    }\n    fragColor = finalColor;\n}\n  void main () {\n    mainImage(gl_FragColor, v_uv0.xy);\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform ARGS{\n    vec4 iResolution;\n    vec4 color;\n  };\n  void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy;\n    vec2 unit = 1.0 / iResolution.xy;\n    vec4 texel = texture2D(texture, uv);\n    vec4 finalColor = vec4(0.0);\n    float density = 0.0;\n    if(texel.a >= 1.0)\n    {\n        finalColor = texel;\n    }\n    else\n    {\n        const float radius = 1.0;\n        for(int i = 0; i < (int(radius)); ++i)\n        {\n            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;\n            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;\n            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;\n            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;\n        }\n        density = density / radius;\n        finalColor = vec4(color.rgb * density, density);\n        finalColor += vec4(texel.rgb * texel.a, texel.a);\n    }\n    fragColor = finalColor;\n}\n  void main () {\n    mainImage(gl_FragColor, v_uv0.xy);\n  }"
      }
    }
  ],
  "subMetas": {}
}
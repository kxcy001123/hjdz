// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        text: {
          value: 1.0
        }
        RippleColor: {
          value: [1.0, 1.0, 1.0, 1.0], 
          editor: { 
            type: color,
            tooltip: "水纹颜色"
          } 
        }
        avv: {
          value: 16.1,
          editor: {
            tooltip: "水纹虚幻度 越大越多"
          }
        }
        pow1: {
          value: 0.0
        }
        pow2: {
          value: 10.1
        }
        pow3: {
          value: 0.1
        }
        speed: {
          value: 4.5,
          editor: {
            tooltip: "流光速度"
          }
        }
    

        
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  #include <cc-global>
  #include <alpha-test>
  #include <texture>

  #define TAU 6.12
  #define MAX_ITER 5

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform ARGS{
    float text;
    float avv;
    float pow1;
    float pow2;
    float pow3;
    float speed;
  };

  uniform Light {
    vec4 RippleColor;
  };

  void main () {

    vec4 color = v_color;

    float time = cc_time.x * .5+5.;
    // uv should be the 0-1 uv of texture...
    vec2 uv = v_uv0.xy;//fragCoord.xy / iResolution.xy;

    vec2 p = mod(uv*avv, avv)-250.0;
    vec2 i = vec2(p);
    float c = 1.0;
    float inten = .0045;
    float speed = 4.5;

    for (int n = 0; n < MAX_ITER; n++) 
    {
        // 
        float t =  time * (1.0 - (speed / float(n+1)));
        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5*t + i.x));
        c += 1.0/length(vec2(p.x / (cos(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));
    }
    c /= float(MAX_ITER);
    // 1.8  光波的宽度 c = 1.17-pow(c, 1.8);
    c = 1.17-pow(c, 1.8);
    vec4 tex = texture2D(texture,uv);

    // vec3 colorr = vec3(RippleColor.r,RippleColor.g,RippleColor.b);
    // colour = clamp(colour + colorr, RippleColor.b, tex.a);
    float c1;
    float c2;
    float c3;

    if(pow1==0.0){
      c1 = 0.0;
    }else{
      c1 = pow(abs(c), pow1);
    }

    if(pow2==0.0){
      c2 = 0.0;
    }else{
      c2 = pow(abs(c), pow2);
    }

    if(pow3==0.0){
      c3 = 0.0;
    }else{
      c3 = pow(abs(c), pow3);
    }

    // 可以控制光波颜色 调整pow的第二个参数
    vec3 colour = vec3(c1, c2, c3);  

    // 白色光波
    // vec3 colour = vec3(pow(abs(c), 20.0));

    // colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);
    // 覆盖到原本物体上的颜色
    colour = clamp(colour + vec3(.0, .0, .0), .0, tex.a);



    // 混合波光
    float alpha = c*tex[3];  
    tex[0] = tex[0] + colour[0]*alpha; 
    tex[1] = tex[1] + colour[1]*alpha; 
    tex[2] = tex[2] + colour[2]*alpha; 


    gl_FragColor = color * tex;
  }
}%

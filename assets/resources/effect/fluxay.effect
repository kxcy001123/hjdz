// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        color: {
          value: [1.0, 1.0, 1.0, 1.0],
          editor: {
            type: color,
            tooltip: "颜色"
          }
        }
        # '流光的宽度范围'
        width: {
          value: 0.02,
          editor: {
            tooltip: "流光的宽度范围"
          }
        }
        # 流光增亮强度
        strength: {
          value: 0.008,
          editor: {
            tooltip: "流光增亮强度"
          }
        }
        # 偏移值
        offset: {
          value: 0.5,
          editor: {
            tooltip: "偏移值"
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform ARGS{
    vec4  color;
    float width;
    float strength;
    float offset;
  };



  void main () {

    vec4 src_color = color * texture2D(texture, v_uv0).rgba;
    float start = tan(cc_time.x/1.414);  //流光的起始x坐标

    if(v_uv0.x < (start - offset * v_uv0.y) &&  v_uv0.x > (start - offset * v_uv0.y - width))
    {
        vec3 improve = strength * vec3(255, 255, 255);
        vec3 result = improve * vec3( src_color.r, src_color.g, src_color.b);
        gl_FragColor = vec4(result, src_color.a);

    }else{
        gl_FragColor = src_color;
    }
  }
}%

{
  "ver": "1.0.25",
  "uuid": "70777825-7967-4a13-8358-16447025c2b1",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D mainTexture;\n#if USE_TEXTURE_MOVE\nuniform vec2 textureMoveSpeed;\n#endif\n#endif\n#if USE_NOISE_TEXTURE\n  uniform sampler2D noiseTexture;\n  #if USE_NOISE_MOVE\n  uniform vec2 noiseMoveSpeed;\n  #endif\n#endif\nvoid main () {\n  vec4 o = vec4(1.0, 1.0, 1.0, 1.0);\n  o *= texture2D(texture, v_uv0);\n  #if USE_TEXTURE\n    vec2 uv = v_uv0;\n    #if USE_TEXTURE_MOVE\n      uv.x = uv.x + cc_time.x * textureMoveSpeed.x;\n      uv.y = uv.y + cc_time.x * textureMoveSpeed.y;\n    #endif\n    #if USE_NOISE_TEXTURE\n      vec2 noise_uv = v_uv0;\n      #if USE_NOISE_MOVE\n        vec2 speed = vec2(cc_time.x * noiseMoveSpeed.x ,cc_time.x * noiseMoveSpeed.y);\n        noise_uv.xy = v_uv0.xy + speed.xy;\n      #endif\n      vec4 offset = texture2D(noiseTexture,noise_uv);\n      uv.x = uv.x + (offset.x - 0.5);\n      uv.y = uv.y + (offset.y - 0.5);\n    #endif\n  #endif\n  vec4 mainColor = texture2D(mainTexture, uv);\n  if(mainColor.y > 0.55){\n    o *= vec4(mainColor[0], mainColor[1], mainColor[2], 1.0);\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D mainTexture;\n#if USE_TEXTURE_MOVE\nuniform ConstTextureMove{\n  vec2 textureMoveSpeed;\n};\n#endif\n#endif\n#if USE_NOISE_TEXTURE\n  uniform sampler2D noiseTexture;\n  #if USE_NOISE_MOVE\n  uniform ConstNoiseMove{\n    vec2 noiseMoveSpeed;\n  };\n  #endif\n#endif\nvoid main () {\n  vec4 o = vec4(1.0, 1.0, 1.0, 1.0);\n  o *= texture(texture, v_uv0);\n  #if USE_TEXTURE\n    vec2 uv = v_uv0;\n    #if USE_TEXTURE_MOVE\n      uv.x = uv.x + cc_time.x * textureMoveSpeed.x;\n      uv.y = uv.y + cc_time.x * textureMoveSpeed.y;\n    #endif\n    #if USE_NOISE_TEXTURE\n      vec2 noise_uv = v_uv0;\n      #if USE_NOISE_MOVE\n        vec2 speed = vec2(cc_time.x * noiseMoveSpeed.x ,cc_time.x * noiseMoveSpeed.y);\n        noise_uv.xy = v_uv0.xy + speed.xy;\n      #endif\n      vec4 offset = texture(noiseTexture,noise_uv);\n      uv.x = uv.x + (offset.x - 0.5);\n      uv.y = uv.y + (offset.y - 0.5);\n    #endif\n  #endif\n  vec4 mainColor = texture(mainTexture, uv);\n  if(mainColor.y > 0.55){\n    o *= vec4(mainColor[0], mainColor[1], mainColor[2], 1.0);\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}
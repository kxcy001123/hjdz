// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

        time: { value: 0.5 }
        resolution: { value: [0.5,0.5] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform ARGS{
    vec2 resolution;
    float time;
  };

  const float count = 5.0;

  float Hash( vec2 p, in float s)
  {
    vec3 p2 = vec3(p.xy,27.0 * abs(sin(s)));
    return fract(sin(dot(p2,vec3(27.1,61.7, 12.4)))*273758.5453123);
  }

  float noise(in vec2 p, in float s)
  {
      vec2 i = floor(p);
      vec2 f = fract(p);
      f *= f * (3.0-2.0*f);

      return mix(mix(Hash(i + vec2(0.,0.), s), Hash(i + vec2(1.,0.), s),f.x),
      mix(Hash(i + vec2(0.,1.), s), Hash(i + vec2(1.,1.), s),f.x),
      f.y) * s;
  }

  float fbm(vec2 p)
  {
      float v = 0.0;
      v += noise(p*1., 0.35);
      v += noise(p*2., 0.25);
      v += noise(p*4., 0.125);
      v += noise(p*8., 0.0625);
      return v;
  }


  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);

      // vec4 color = texture2D(texture,v_uv0);
    #endif
    vec2 uv = ( v_uv0.xy / resolution.xy ) * 2.0 - 1.0;
    uv.x *= resolution.x/resolution.y;

    vec3 finalColor = vec3(1.0, 1.0, 1.0 );
    for( float i=1.; i < count; ++i )
    {
      float t = abs(1.0 / ((uv.x + fbm( uv + cc_time.x/i)) * (i*20.0)));

      // float t = abs(1.0 / ((uv.x + fbm( uv + time/i)) * (i*50.0)));
      finalColor +=  t * vec3( i * 0.075 +0.1, 0.5, 2.0 );
    }
    gl_FragColor = o * vec4( finalColor, 1.0 );
  }
}%

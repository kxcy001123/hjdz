{
  "ver": "1.0.25",
  "uuid": "a3c5e6f8-357e-4cd6-a230-54e890e7e5e8",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 resolution;\nconst float count = 5.0;\nfloat Hash( vec2 p, in float s)\n{\n  vec3 p2 = vec3(p.xy,27.0 * abs(sin(s)));\n  return fract(sin(dot(p2,vec3(27.1,61.7, 12.4)))*273758.5453123);\n}\nfloat noise(in vec2 p, in float s)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f *= f * (3.0-2.0*f);\n    return mix(mix(Hash(i + vec2(0.,0.), s), Hash(i + vec2(1.,0.), s),f.x),\n    mix(Hash(i + vec2(0.,1.), s), Hash(i + vec2(1.,1.), s),f.x),\n    f.y) * s;\n}\nfloat fbm(vec2 p)\n{\n    float v = 0.0;\n    v += noise(p*1., 0.35);\n    v += noise(p*2., 0.25);\n    v += noise(p*4., 0.125);\n    v += noise(p*8., 0.0625);\n    return v;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec2 uv = ( v_uv0.xy / resolution.xy ) * 2.0 - 1.0;\n  uv.x *= resolution.x/resolution.y;\n  vec3 finalColor = vec3(1.0, 1.0, 1.0 );\n  for( float i=1.; i < count; ++i )\n  {\n    float t = abs(1.0 / ((uv.x + fbm( uv + cc_time.x/i)) * (i*20.0)));\n    finalColor +=  t * vec3( i * 0.075 +0.1, 0.5, 2.0 );\n  }\n  gl_FragColor = o * vec4( finalColor, 1.0 );\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform ARGS{\n  vec2 resolution;\n  float time;\n};\nconst float count = 5.0;\nfloat Hash( vec2 p, in float s)\n{\n  vec3 p2 = vec3(p.xy,27.0 * abs(sin(s)));\n  return fract(sin(dot(p2,vec3(27.1,61.7, 12.4)))*273758.5453123);\n}\nfloat noise(in vec2 p, in float s)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f *= f * (3.0-2.0*f);\n    return mix(mix(Hash(i + vec2(0.,0.), s), Hash(i + vec2(1.,0.), s),f.x),\n    mix(Hash(i + vec2(0.,1.), s), Hash(i + vec2(1.,1.), s),f.x),\n    f.y) * s;\n}\nfloat fbm(vec2 p)\n{\n    float v = 0.0;\n    v += noise(p*1., 0.35);\n    v += noise(p*2., 0.25);\n    v += noise(p*4., 0.125);\n    v += noise(p*8., 0.0625);\n    return v;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec2 uv = ( v_uv0.xy / resolution.xy ) * 2.0 - 1.0;\n  uv.x *= resolution.x/resolution.y;\n  vec3 finalColor = vec3(1.0, 1.0, 1.0 );\n  for( float i=1.; i < count; ++i )\n  {\n    float t = abs(1.0 / ((uv.x + fbm( uv + cc_time.x/i)) * (i*20.0)));\n    finalColor +=  t * vec3( i * 0.075 +0.1, 0.5, 2.0 );\n  }\n  gl_FragColor = o * vec4( finalColor, 1.0 );\n}"
      }
    }
  ],
  "subMetas": {}
}